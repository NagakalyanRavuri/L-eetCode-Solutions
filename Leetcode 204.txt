PROBLEM:  Count Primes

Use 'sieve of Eratosthenes'
why? Because to reduce the time complexity for bigger numbers like 10^4,10^5 etc.

QUESTION:
Given an integer n, return the number of prime numbers that are strictly less than n.

 

Example 1:

Input: n = 10
Output: 4
Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.
Example 2:

Input: n = 0
Output: 0
Example 3:

Input: n = 1
Output: 0

ANSWER CODE:

class Solution {
    public int countPrimes(int n) {
        int[] prime = new int[n+1];
        for(int i =0;i<n;i++){
            prime[i] = 1;
        }
        prime[0] = 0;
        if(prime.length>1){
        prime[1] = 0;
        }
        for(int i =2;i*i<n;i++){
            if(prime[i] == 1){
                for(int j = i*i;j<n;j+=i){
                    prime[j] = 0;
                }
            }
        }
        int count = 0;
        for(int i =0;i<prime.length;i++){
            if(prime[i] == 1){
                count++;
            }
        }
        return count;
    }
}